#include "stdafx.h"
#include "SecureTxtCrypto.h"
#include "MD5Checksum.h"

const BYTE BYTE_TABLE1[] = {
	0xAB, 0x23, 0xB8, 0xBA, 0x4F, 0xA9, 0xC2, 0x76,
	0xA7, 0x96, 0xD6, 0xCF, 0x13, 0x18, 0x06, 0xA9,
	0x82, 0x84, 0xF1, 0x1E, 0x8B, 0xE1, 0xF6, 0x54,
	0x90, 0xD2, 0xDB, 0xE5, 0x7F, 0xA7, 0x1B, 0x4A,

	0xAF, 0xE9, 0xB2, 0xDC, 0x3F, 0xE4, 0x1A, 0xB9,
	0x86, 0x70, 0x3E, 0xE6, 0x44, 0x19, 0x89, 0x78,
	0xA8, 0x74, 0xA1, 0xDA, 0x84, 0x28, 0x13, 0x0F,
	0xA4, 0x26, 0x48, 0x88, 0x8C, 0x93, 0x81, 0x56,

	0xAA, 0x8A, 0x16, 0x4C, 0xF8, 0x77, 0x4D, 0x01,
	0xBF, 0x11, 0x62, 0x09, 0xD7, 0xBE, 0x0E, 0x31,
	0x9B, 0xA7, 0xD2, 0xF4, 0xE0, 0x01, 0xFB, 0x1C,
	0x89, 0xDE, 0x13, 0x7E, 0x43, 0x19, 0xC8, 0x59,

	0xB4, 0x90, 0xE9, 0xEF, 0x74, 0xC3, 0xB0, 0xFD,
	0xAC, 0x61, 0x3A, 0xAE, 0xAA, 0x64, 0xB2, 0xC1,
	0x81, 0xEE, 0x9E, 0x18, 0xC5, 0x39, 0xA4, 0x4C,
	0xBD, 0x6D, 0x1A, 0x3B, 0xF5, 0x6D, 0x68, 0x7E
};

const BYTE BYTE_TABLE2[] = {
	0x93, 0xA0, 0xA4, 0xC3, 0x82, 0x82, 0xD0, 0x9C,
	0x95, 0x09, 0xA9, 0x7F, 0x18, 0x7F, 0xE5, 0x65,
	0x98, 0xE7, 0xBF, 0x6E, 0x16, 0x13, 0xF6, 0x9A,
	0xB8, 0xF6, 0xF7, 0x84, 0x23, 0x19, 0x9C, 0xB8,

	0x90, 0x63, 0x51, 0xE5, 0x0F, 0x3F, 0xA3, 0x4C,
	0xBE, 0x40, 0x4D, 0x1E, 0x31, 0x90, 0xD1, 0x78,
	0x83, 0x46, 0x1A, 0xCF, 0x07, 0xD8, 0x24, 0xF2,
	0xB1, 0x2C, 0x08, 0xA6, 0xEA, 0xB6, 0x09, 0x64,

	0xA9, 0x10, 0x8A, 0x1C, 0x4A, 0x65, 0x96, 0x6A,
	0xA2, 0xF9, 0x43, 0xAB, 0x54, 0x61, 0xE4, 0x76,
	0x89, 0x0F, 0x60, 0xF5, 0x6E, 0x5F, 0x72, 0xD6,
	0xBC, 0x9C, 0xDE, 0x77, 0xDB, 0x26, 0x3E, 0x41,

	0xA4, 0x13, 0x17, 0x2F, 0x5D, 0xA6, 0x81, 0x6D,
	0xA8, 0x87, 0xA6, 0x62, 0xF4, 0xCB, 0x2E, 0x05,
	0x98, 0x5D, 0x29, 0x59, 0x91, 0x8B, 0xB1, 0x5E,
	0xA1, 0x75, 0x13, 0xF9, 0x23, 0xBF, 0x89, 0x37
};

#define TABLE_SIZE1		128
#define TABLE_SIZE2		127

CSecureTxtCrypto::CSecureTxtCrypto(): m_pPasswordMd5(NULL), m_pBackupPasswordMd5(NULL)
{}

CSecureTxtCrypto::~CSecureTxtCrypto()
{
	DeletePassword();
	if (m_pBackupPasswordMd5)
		delete [] m_pBackupPasswordMd5;
}

void CSecureTxtCrypto::_PasswordTo16Bytes(LPCTSTR lpszPassword, LPBYTE pBuff)
{
	CString sPassword(lpszPassword);
	sPassword.MakeLower();
	CString sMD5 = CMD5Checksum::GetStringMD5(sPassword);
	for (int i = 0; i < 16; i++)
	{
		CString s = sMD5.Mid(i * 2, 2);
		pBuff[i] = (BYTE)_tcstoul(s, NULL, 16);
	}
}

void CSecureTxtCrypto::SetPassword(LPCTSTR lpszPassword, BOOL bBackupOldPassword)
{
	if (bBackupOldPassword)
		_BackupPassword();

	DeletePassword();
	if (lpszPassword)
	{
		m_pPasswordMd5 = new BYTE[16];
		_PasswordTo16Bytes(lpszPassword, m_pPasswordMd5);
	}
}

void CSecureTxtCrypto::DeletePassword()
{
	if (m_pPasswordMd5)
	{
		delete [] m_pPasswordMd5;
		m_pPasswordMd5 = NULL;
	}
}

BOOL CSecureTxtCrypto::HasPassword() const
{
	return m_pPasswordMd5 != NULL;
}

void CSecureTxtCrypto::_BackupPassword()
{
	if (HasPassword())
	{
		if (!m_pBackupPasswordMd5)
		m_pBackupPasswordMd5 = new BYTE[16];
		::memcpy(m_pBackupPasswordMd5, m_pPasswordMd5, 16);
	}
	else
	{
		if (m_pBackupPasswordMd5)
		{
			delete m_pBackupPasswordMd5;
			m_pBackupPasswordMd5 = NULL;
		}
	}
}

void CSecureTxtCrypto::RestoreLastPassword()
{
	if (m_pBackupPasswordMd5)
	{
		if (m_pPasswordMd5 == NULL)
			m_pPasswordMd5 = new BYTE[16];
		::memcpy(m_pPasswordMd5, m_pBackupPasswordMd5, 16);
	}
	else
	{
		if (HasPassword())
			DeletePassword();
	}
}

void CSecureTxtCrypto::Encrypt(LPBYTE pData, DWORD dwLength) const
{
	ASSERT(pData);
	if (dwLength == 0)
		return;
	
	DWORD i;
	for (i = 0; i < dwLength; i++)
		pData[i] ^= BYTE_TABLE1[i % TABLE_SIZE1];

	for (i = 0; i < dwLength; i++)
		pData[i] ^= BYTE_TABLE2[i % TABLE_SIZE2];

	if (HasPassword())
	{
		for (i = 0; i < dwLength; i++)
		{
			for (int j = 0; j < 16; j++)
				pData[i] ^= m_pPasswordMd5[j];	
		}
	}	
}

void CSecureTxtCrypto::Decrypt(LPBYTE pData, DWORD dwLength) const
{
	ASSERT(pData);
	DWORD i;

	if (HasPassword())
	{
		for (i = 0; i < dwLength; i++)
		{
			for (int j = 15; j >= 0; j--)
				pData[i] ^= m_pPasswordMd5[j];	
		}
	}
	
	for (i = 0; i < dwLength; i++)
		pData[i] ^= BYTE_TABLE2[i % TABLE_SIZE2];	

	for (i = 0; i < dwLength; i++)
		pData[i] ^= BYTE_TABLE1[i % TABLE_SIZE1];
}

